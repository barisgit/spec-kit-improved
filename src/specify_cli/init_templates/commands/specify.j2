---
name: specify
description: "Start a new feature by creating a specification and feature branch. This is the first step in the Spec-Driven Development lifecycle."
---

Start a new feature by creating a specification and feature branch for {{ project_name }}.

This is the first step in the Spec-Driven Development lifecycle.

Given the feature description provided as an argument, do this:

1. Run the script `.specify/scripts/create-feature.py --json "{ARGS}"` from repo root and parse its JSON output for BRANCH_NAME and SPEC_FILE. All file paths must be absolute.
2. Load `.specify/templates/spec-template.j2` to understand required sections.
3. Write the specification to SPEC_FILE using the template structure, replacing placeholders with concrete details derived from the feature description (arguments) while preserving section order and headings.
4. Report completion with branch name, spec file path, and readiness for the next phase.

{% if ai_assistant == 'claude' -%}
Note: The script creates and checks out the new branch and initializes the spec file before writing.

**Claude Code Integration:**
- Use this command with `/specify` in any file 
- The script automatically handles branch creation and spec initialization
- Generated specifications follow the project's configured branch naming pattern
{% elif ai_assistant == 'gemini' -%}
Note: The script creates and checks out the new branch and initializes the spec file before writing.

**Gemini Integration:**
- Use this command to start new features
- Templates optimized for Gemini's interaction patterns
- Specifications are generated using Jinja2 templates
{% elif ai_assistant == 'copilot' -%}
Note: The script creates and checks out the new branch and initializes the spec file before writing.

**GitHub Copilot Integration:**
- Use this command in your IDE or terminal
- Works with your configured branch naming patterns
- Python-based for reliable cross-platform execution
{% else -%}
Note: The script creates and checks out the new branch and initializes the spec file before writing.

**Generic AI Assistant:**
- Use this command to create feature specifications
- Python-based scripts provide cross-platform compatibility
- Configurable branch naming patterns supported
{% endif -%}