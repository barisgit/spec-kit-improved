#!/usr/bin/env python3
"""
Setup implementation plan structure for current branch.
Returns paths needed for implementation plan generation.
Generated by SpecifyX init command.
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, Optional, Tuple

# Import SpecifyX utilities for consistency
try:
    from specify_cli.services import CommandLineGitService
    from specify_cli.utils.validators import validate_branch_name
except ImportError:
    # Fallback if running outside SpecifyX context
    print("Warning: SpecifyX utilities not available, using basic implementation", file=sys.stderr)
    CommandLineGitService = None
    validate_branch_name = lambda x: (True, None)


def get_repo_root() -> Path:
    """Get repository root directory."""
    try:
        import subprocess
        result = subprocess.run(['git', 'rev-parse', '--show-toplevel'], 
                              capture_output=True, text=True, check=True)
        return Path(result.stdout.strip())
    except (subprocess.CalledProcessError, FileNotFoundError):
        return Path.cwd()


def get_current_branch() -> Optional[str]:
    """Get current git branch."""
    if CommandLineGitService:
        git_service = CommandLineGitService()
        return git_service.get_current_branch(get_repo_root())
    
    try:
        import subprocess
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None


def is_feature_branch(branch_name: str) -> bool:
    """Check if branch is a feature branch."""
    if not branch_name:
        return False
    
    # Check common feature branch patterns
    patterns = [
        r'^\d{3}-',  # 001-feature-name
        r'^feature/',  # feature/name
        r'^feat/',     # feat/name
    ]
    
    import re
    for pattern in patterns:
        if re.match(pattern, branch_name):
            return True
    
    return False


def get_feature_paths() -> Tuple[bool, Dict[str, str]]:
    """Get all feature-related paths."""
    repo_root = get_repo_root()
    current_branch = get_current_branch()
    
    if not current_branch:
        return False, {"error": "Not in a git repository or no current branch"}
    
    if not is_feature_branch(current_branch):
        return False, {"error": f"Not on a feature branch: {current_branch}"}
    
    # Determine feature directory name from branch
    # For "001-feature-name" branch, directory should be "001-feature-name"
    # For "feature/name" branch, need to find matching numbered directory
    specs_dir = repo_root / "specs"
    feature_dir = None
    
    if current_branch.startswith(('001-', '002-', '003-')):
        # Direct mapping for numbered branches
        feature_dir = specs_dir / current_branch
    else:
        # Search for matching feature directory
        if specs_dir.exists():
            for dir_path in specs_dir.iterdir():
                if dir_path.is_dir():
                    # Simple heuristic: find directory with similar name
                    if current_branch.replace('feature/', '').replace('feat/', '') in dir_path.name:
                        feature_dir = dir_path
                        break
    
    if not feature_dir:
        return False, {"error": f"Cannot find feature directory for branch: {current_branch}"}
    
    feature_spec = feature_dir / "spec.md"
    impl_plan = feature_dir / "plan.md"
    
    paths = {
        "FEATURE_SPEC": str(feature_spec.absolute()),
        "IMPL_PLAN": str(impl_plan.absolute()),
        "SPECS_DIR": str(feature_dir.absolute()),
        "BRANCH": current_branch
    }
    
    return True, paths


def setup_plan_structure() -> Tuple[bool, Dict[str, str]]:
    """Setup implementation plan structure."""
    success, result = get_feature_paths()
    if not success:
        return False, result
    
    repo_root = get_repo_root()
    feature_dir = Path(result["SPECS_DIR"])
    impl_plan = Path(result["IMPL_PLAN"])
    
    try:
        # Create feature directory if it doesn't exist
        feature_dir.mkdir(parents=True, exist_ok=True)
        
        # Copy plan template if it exists and plan doesn't exist yet
        if not impl_plan.exists():
            template_path = repo_root / ".specify" / "templates" / "plan-template.j2"
            if template_path.exists():
                import shutil
                shutil.copy2(template_path, impl_plan)
            else:
                # Create basic plan file
                impl_plan.write_text("# Implementation Plan\n\n**Status**: Draft\n")
        
        return True, result
        
    except Exception as e:
        return False, {"error": str(e)}


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Setup implementation plan structure")
    parser.add_argument("--json", action="store_true", help="Output JSON format")
    
    args = parser.parse_args()
    
    success, result = setup_plan_structure()
    
    if not success:
        if args.json:
            print(json.dumps(result))
        else:
            print(f"Error: {result.get('error', 'Unknown error')}", file=sys.stderr)
        sys.exit(1)
    
    if args.json:
        print(json.dumps(result))
    else:
        for key, value in result.items():
            print(f"{key}: {value}")


if __name__ == "__main__":
    main()