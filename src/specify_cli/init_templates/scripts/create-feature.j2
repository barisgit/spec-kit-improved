#!/usr/bin/env python3
"""
Create a new feature with branch, directory structure, and template.
Generated by SpecifyX init command.
"""

import argparse
import json
import re
import shutil
import sys
from pathlib import Path
from typing import Dict, Optional, Tuple

# Import SpecifyX utilities for consistency
try:
    from specify_cli.services import CommandLineGitService, TomlConfigService
    from specify_cli.utils.validators import validate_feature_description
except ImportError:
    # Fallback if running outside SpecifyX context
    print("Warning: SpecifyX utilities not available, using basic implementation", file=sys.stderr)
    CommandLineGitService = None
    TomlConfigService = None
    validate_feature_description = lambda x: (True, None)


def get_repo_root() -> Path:
    """Get repository root directory."""
    try:
        import subprocess
        result = subprocess.run(['git', 'rev-parse', '--show-toplevel'], 
                              capture_output=True, text=True, check=True)
        return Path(result.stdout.strip())
    except (subprocess.CalledProcessError, FileNotFoundError):
        # Fallback to current directory if not in git repo
        return Path.cwd()


def get_next_feature_number(specs_dir: Path) -> str:
    """Get next feature number with zero padding."""
    highest = 0
    
    if specs_dir.exists():
        for dir_path in specs_dir.iterdir():
            if dir_path.is_dir():
                match = re.match(r'^(\d+)', dir_path.name)
                if match:
                    number = int(match.group(1))
                    highest = max(highest, number)
    
    next_num = highest + 1
    return f"{next_num:03d}"


def create_branch_name(description: str, feature_num: str) -> str:
    """Create branch name from feature description."""
    # Convert to lowercase and replace non-alphanumeric with hyphens
    clean = re.sub(r'[^a-z0-9]', '-', description.lower())
    # Remove multiple consecutive hyphens
    clean = re.sub(r'-+', '-', clean)
    # Remove leading/trailing hyphens  
    clean = clean.strip('-')
    
    # Extract 2-3 meaningful words
    words = [w for w in clean.split('-') if w and len(w) > 2][:3]
    if not words:
        words = ['feature']
    
    return f"{feature_num}-{'-'.join(words)}"


def load_project_config() -> Optional[Dict]:
    """Load project configuration if available."""
    if TomlConfigService:
        try:
            config_service = TomlConfigService()
            return config_service.load_project_config(Path.cwd())
        except Exception:
            pass
    return None


def get_branch_pattern() -> str:
    """Get branch naming pattern from project config."""
    config = load_project_config()
    if config and hasattr(config, 'branch_naming'):
        return config.branch_naming.default_pattern
    return "{{ feature_num }}-{{ feature_name }}"  # Default pattern


def apply_branch_pattern(pattern: str, feature_num: str, feature_name: str) -> str:
    """Apply branch naming pattern with variable substitution."""
    # Simple template substitution
    result = pattern.replace('{{ feature_num }}', feature_num)
    result = result.replace('{{ feature_name }}', feature_name)
    result = result.replace('{feature_num}', feature_num)
    result = result.replace('{feature_name}', feature_name)
    return result


def create_feature(description: str, json_mode: bool = False) -> Tuple[bool, Dict[str, str]]:
    """Create new feature with branch and spec file."""
    # Validate feature description
    is_valid, error = validate_feature_description(description)
    if not is_valid:
        return False, {"error": f"Invalid feature description: {error}"}
    
    repo_root = get_repo_root()
    specs_dir = repo_root / "specs"
    specs_dir.mkdir(exist_ok=True)
    
    # Get next feature number
    feature_num = get_next_feature_number(specs_dir)
    
    # Create feature name for directory
    feature_words = re.sub(r'[^a-z0-9]', '-', description.lower()).strip('-')
    feature_words = re.sub(r'-+', '-', feature_words)
    words = [w for w in feature_words.split('-') if w and len(w) > 2][:3]
    feature_name = '-'.join(words) if words else 'feature'
    
    # Get branch pattern and create branch name
    pattern = get_branch_pattern()
    branch_name = apply_branch_pattern(pattern, feature_num, feature_name)
    
    # Create directory name (always use numbered format for specs)
    dir_name = f"{feature_num}-{feature_name}"
    feature_dir = specs_dir / dir_name
    
    try:
        # Create and switch to new branch
        if CommandLineGitService:
            git_service = CommandLineGitService()
            if not git_service.create_branch(branch_name, repo_root):
                return False, {"error": f"Failed to create branch: {branch_name}"}
        else:
            # Fallback git command
            import subprocess
            subprocess.run(['git', 'checkout', '-b', branch_name], check=True, cwd=repo_root)
        
        # Create feature directory
        feature_dir.mkdir(exist_ok=True)
        
        # Copy spec template
        template_path = repo_root / ".specify" / "templates" / "spec-template.j2"
        spec_file = feature_dir / "spec.md"
        
        if template_path.exists():
            shutil.copy2(template_path, spec_file)
        else:
            # Create basic spec file
            spec_file.write_text(f"# Feature Specification: {description}\n\n**Status**: Draft\n")
        
        result = {
            "BRANCH_NAME": branch_name,
            "SPEC_FILE": str(spec_file.absolute()),
            "FEATURE_NUM": feature_num,
            "FEATURE_DIR": str(feature_dir.absolute())
        }
        
        return True, result
        
    except Exception as e:
        return False, {"error": str(e)}


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Create a new feature with branch and spec file")
    parser.add_argument("description", help="Feature description")
    parser.add_argument("--json", action="store_true", help="Output JSON format")
    
    args = parser.parse_args()
    
    if not args.description.strip():
        print("Error: Feature description cannot be empty", file=sys.stderr)
        sys.exit(1)
    
    success, result = create_feature(args.description, args.json)
    
    if not success:
        if args.json:
            print(json.dumps(result))
        else:
            print(f"Error: {result.get('error', 'Unknown error')}", file=sys.stderr)
        sys.exit(1)
    
    if args.json:
        print(json.dumps(result))
    else:
        for key, value in result.items():
            print(f"{key}: {value}")


if __name__ == "__main__":
    main()