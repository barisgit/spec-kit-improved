#!/usr/bin/env python3
"""
Check task prerequisites and return available documents.
Generated by SpecifyX init command.
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, List, Tuple

# Import SpecifyX utilities for consistency
try:
    from specify_cli.services import CommandLineGitService
except ImportError:
    print("Warning: SpecifyX utilities not available, using basic implementation", file=sys.stderr)
    CommandLineGitService = None


def get_repo_root() -> Path:
    """Get repository root directory."""
    try:
        import subprocess
        result = subprocess.run(['git', 'rev-parse', '--show-toplevel'], 
                              capture_output=True, text=True, check=True)
        return Path(result.stdout.strip())
    except (subprocess.CalledProcessError, FileNotFoundError):
        return Path.cwd()


def get_current_branch() -> str:
    """Get current git branch."""
    if CommandLineGitService:
        git_service = CommandLineGitService()
        branch = git_service.get_current_branch(get_repo_root())
        return branch or "main"
    
    try:
        import subprocess
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True, check=True)
        return result.stdout.strip() or "main"
    except (subprocess.CalledProcessError, FileNotFoundError):
        return "main"


def find_feature_directory() -> Path:
    """Find feature directory based on current branch."""
    repo_root = get_repo_root()
    current_branch = get_current_branch()
    specs_dir = repo_root / "specs"
    
    if not specs_dir.exists():
        return specs_dir / current_branch
    
    # Try direct mapping first
    direct_match = specs_dir / current_branch
    if direct_match.exists():
        return direct_match
    
    # Search for matching directories
    branch_clean = current_branch.replace('feature/', '').replace('feat/', '')
    for dir_path in specs_dir.iterdir():
        if dir_path.is_dir():
            if branch_clean in dir_path.name or dir_path.name in branch_clean:
                return dir_path
    
    # Fallback to branch name
    return specs_dir / current_branch


def scan_available_documents(feature_dir: Path) -> List[str]:
    """Scan for available design documents."""
    available_docs = []
    
    # Standard documents to check
    docs_to_check = [
        "plan.md",
        "spec.md", 
        "data-model.md",
        "research.md",
        "quickstart.md",
    ]
    
    for doc in docs_to_check:
        doc_path = feature_dir / doc
        if doc_path.exists() and doc_path.stat().st_size > 0:
            available_docs.append(str(doc_path.absolute()))
    
    # Check for contracts directory
    contracts_dir = feature_dir / "contracts"
    if contracts_dir.exists() and contracts_dir.is_dir():
        contract_files = list(contracts_dir.glob("*.json")) + list(contracts_dir.glob("*.yaml")) + list(contracts_dir.glob("*.yml"))
        if contract_files:
            available_docs.extend([str(f.absolute()) for f in contract_files])
    
    return available_docs


def check_prerequisites() -> Tuple[bool, Dict]:
    """Check prerequisites for task generation."""
    try:
        feature_dir = find_feature_directory()
        available_docs = scan_available_documents(feature_dir)
        
        # Must have at least plan.md
        plan_path = feature_dir / "plan.md"
        if not plan_path.exists():
            return False, {
                "error": f"Required plan.md not found in {feature_dir}. Run planning phase first."
            }
        
        result = {
            "FEATURE_DIR": str(feature_dir.absolute()),
            "AVAILABLE_DOCS": available_docs,
            "REQUIRED_DOCS": ["plan.md"],
            "OPTIONAL_DOCS": ["data-model.md", "contracts/", "research.md", "quickstart.md"]
        }
        
        return True, result
        
    except Exception as e:
        return False, {"error": str(e)}


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Check task prerequisites")
    parser.add_argument("--json", action="store_true", help="Output JSON format")
    
    args = parser.parse_args()
    
    success, result = check_prerequisites()
    
    if not success:
        if args.json:
            print(json.dumps(result))
        else:
            print(f"Error: {result.get('error', 'Unknown error')}", file=sys.stderr)
        sys.exit(1)
    
    if args.json:
        print(json.dumps(result))
    else:
        print(f"FEATURE_DIR: {result['FEATURE_DIR']}")
        print(f"AVAILABLE_DOCS: {', '.join(result['AVAILABLE_DOCS'])}")


if __name__ == "__main__":
    main()